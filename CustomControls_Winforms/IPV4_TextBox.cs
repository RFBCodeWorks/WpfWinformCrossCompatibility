using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Text.RegularExpressions;



namespace CustomControls.WinForms
{
    /// <summary>
    /// Group of 4 textbox controls that works similar to a single <see cref="MaskedTextBox"/>, but specialized for IPV4 IP Address information. <br/>
    /// This intercepts the key press events and validates when setting the textbox.text value directory to ensure that only allowed characters are entered.
    /// </summary>
    [System.ComponentModel.DesignerCategory("UserControl")]
    public partial class IPV4_TextBox : UserControl, Interfaces.IPV4Textbox
    {
        /// <inheritdoc cref="IPV4_TextBox"/>
        public IPV4_TextBox() : base() 
        {
            InitializeComponent();
            this.Load += IPV4_TextBox_Load;
        }

        private IPV4Group Group1;
        private IPV4Group Group2;
        private IPV4Group Group4;
        private IPV4Group Group3;
        private ErrorProvider ErrorProvider_InvalidIP;
        private Label lbl_Periods;
        private IContainer components;
        

        /// <summary>
        /// AutoGenerated code for the Designer Window
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.Group1 = new CustomControls.WinForms.IPV4_TextBox.IPV4Group();
            this.Group2 = new CustomControls.WinForms.IPV4_TextBox.IPV4Group();
            this.Group3 = new CustomControls.WinForms.IPV4_TextBox.IPV4Group();
            this.Group4 = new CustomControls.WinForms.IPV4_TextBox.IPV4Group();
            this.ErrorProvider_InvalidIP = new System.Windows.Forms.ErrorProvider(this.components);
            this.lbl_Periods = new System.Windows.Forms.Label();
            ((System.ComponentModel.ISupportInitialize)(this.ErrorProvider_InvalidIP)).BeginInit();
            this.SuspendLayout();
            // 
            // Group1
            // 
            this.Group1.AllowEnteringValuesOutsideMinMax = false;
            this.Group1.AllowThousandSeperator = false;
            this.Group1.DecimalPlaces = 0;
            this.Group1.DisplayThousandSeperator = false;
            this.Group1.DisplayTrailingZeroes = false;
            this.Group1.ErrorProvider_BlinkRate = 250;
            this.Group1.ErrorProvider_BlinkStyle = System.Windows.Forms.ErrorBlinkStyle.NeverBlink;
            this.Group1.ErrorProvider_Enabled = false;
            this.Group1.ErrorProvider_IconAlignment = System.Windows.Forms.ErrorIconAlignment.MiddleRight;
            this.Group1.ErrorProvider_IconPadding = 0;
            this.Group1.ErrorProvider_ShowOnRejectedKeys = false;
            this.Group1.Location = new System.Drawing.Point(0, 0);
            this.Group1.Maximum = 255;
            this.Group1.Minimum = 0;
            this.Group1.Name = "Group1";
            this.Group1.ReadOnly = false;
            this.Group1.SelectionLength = 0;
            this.Group1.SelectionStart = 0;
            this.Group1.Size = new System.Drawing.Size(30, 20);
            this.Group1.TabIndex = 10;
            this.Group1.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.Group1.ToolTip_CustomCaption = "";
            this.Group1.ToolTip_Enabled = false;
            this.Group1.ToolTip_ShowMinMax = false;
            this.Group1.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            // 
            // Group2
            // 
            this.Group2.AllowEnteringValuesOutsideMinMax = false;
            this.Group2.AllowThousandSeperator = false;
            this.Group2.DecimalPlaces = 0;
            this.Group2.DisplayThousandSeperator = false;
            this.Group2.DisplayTrailingZeroes = false;
            this.Group2.ErrorProvider_BlinkRate = 250;
            this.Group2.ErrorProvider_BlinkStyle = System.Windows.Forms.ErrorBlinkStyle.NeverBlink;
            this.Group2.ErrorProvider_Enabled = false;
            this.Group2.ErrorProvider_IconAlignment = System.Windows.Forms.ErrorIconAlignment.MiddleRight;
            this.Group2.ErrorProvider_IconPadding = 0;
            this.Group2.ErrorProvider_ShowOnRejectedKeys = false;
            this.Group2.Location = new System.Drawing.Point(36, 0);
            this.Group2.Maximum = 255;
            this.Group2.Minimum = 0;
            this.Group2.Name = "Group2";
            this.Group2.ReadOnly = false;
            this.Group2.SelectionLength = 0;
            this.Group2.SelectionStart = 0;
            this.Group2.Size = new System.Drawing.Size(30, 20);
            this.Group2.TabIndex = 11;
            this.Group2.TabStop = false;
            this.Group2.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.Group2.ToolTip_CustomCaption = "";
            this.Group2.ToolTip_Enabled = false;
            this.Group2.ToolTip_ShowMinMax = false;
            this.Group2.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            // 
            // Group3
            // 
            this.Group3.AllowEnteringValuesOutsideMinMax = false;
            this.Group3.AllowThousandSeperator = false;
            this.Group3.DecimalPlaces = 0;
            this.Group3.DisplayThousandSeperator = false;
            this.Group3.DisplayTrailingZeroes = false;
            this.Group3.ErrorProvider_BlinkRate = 250;
            this.Group3.ErrorProvider_BlinkStyle = System.Windows.Forms.ErrorBlinkStyle.NeverBlink;
            this.Group3.ErrorProvider_Enabled = false;
            this.Group3.ErrorProvider_IconAlignment = System.Windows.Forms.ErrorIconAlignment.MiddleRight;
            this.Group3.ErrorProvider_IconPadding = 0;
            this.Group3.ErrorProvider_ShowOnRejectedKeys = false;
            this.Group3.Location = new System.Drawing.Point(72, 0);
            this.Group3.Maximum = 255;
            this.Group3.Minimum = 0;
            this.Group3.Name = "Group3";
            this.Group3.ReadOnly = false;
            this.Group3.SelectionLength = 0;
            this.Group3.SelectionStart = 0;
            this.Group3.Size = new System.Drawing.Size(30, 20);
            this.Group3.TabIndex = 12;
            this.Group3.TabStop = false;
            this.Group3.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.Group3.ToolTip_CustomCaption = "";
            this.Group3.ToolTip_Enabled = false;
            this.Group3.ToolTip_ShowMinMax = false;
            this.Group3.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            // 
            // Group4
            // 
            this.Group4.AllowEnteringValuesOutsideMinMax = false;
            this.Group4.AllowThousandSeperator = false;
            this.Group4.DecimalPlaces = 0;
            this.Group4.DisplayThousandSeperator = false;
            this.Group4.DisplayTrailingZeroes = false;
            this.Group4.ErrorProvider_BlinkRate = 250;
            this.Group4.ErrorProvider_BlinkStyle = System.Windows.Forms.ErrorBlinkStyle.NeverBlink;
            this.Group4.ErrorProvider_Enabled = false;
            this.Group4.ErrorProvider_IconAlignment = System.Windows.Forms.ErrorIconAlignment.MiddleRight;
            this.Group4.ErrorProvider_IconPadding = 0;
            this.Group4.ErrorProvider_ShowOnRejectedKeys = false;
            this.Group4.Location = new System.Drawing.Point(108, 0);
            this.Group4.Maximum = 255;
            this.Group4.Minimum = 0;
            this.Group4.Name = "Group4";
            this.Group4.ReadOnly = false;
            this.Group4.SelectionLength = 0;
            this.Group4.SelectionStart = 0;
            this.Group4.Size = new System.Drawing.Size(30, 20);
            this.Group4.TabIndex = 13;
            this.Group4.TabStop = false;
            this.Group4.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
            this.Group4.ToolTip_CustomCaption = "";
            this.Group4.ToolTip_Enabled = false;
            this.Group4.ToolTip_ShowMinMax = false;
            this.Group4.Value = new decimal(new int[] {
            0,
            0,
            0,
            0});
            // 
            // ErrorProvider_InvalidIP
            // 
            this.ErrorProvider_InvalidIP.BlinkStyle = System.Windows.Forms.ErrorBlinkStyle.NeverBlink;
            this.ErrorProvider_InvalidIP.ContainerControl = this;
            // 
            // lbl_Periods
            // 
            this.lbl_Periods.AutoSize = true;
            this.lbl_Periods.Location = new System.Drawing.Point(1, 7);
            this.lbl_Periods.Name = "lbl_Periods";
            this.lbl_Periods.Size = new System.Drawing.Size(109, 13);
            this.lbl_Periods.TabIndex = 4;
            this.lbl_Periods.Text = "         .           .           .";
            // 
            // IPV4_TextBox
            // 
            this.Controls.Add(this.Group4);
            this.Controls.Add(this.Group1);
            this.Controls.Add(this.Group2);
            this.Controls.Add(this.Group3);
            this.Controls.Add(this.lbl_Periods);
            this.MinimumSize = new System.Drawing.Size(170, 20);
            this.Name = "IPV4_TextBox";
            this.Size = new System.Drawing.Size(170, 20);
            ((System.ComponentModel.ISupportInitialize)(this.ErrorProvider_InvalidIP)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        private void IPV4_TextBox_Load(object sender, EventArgs e)
        {
            // 
            // Link the texboxes together for event handling
            // 
            Group1.SetupGroupOrder(Group2, null);
            Group2.SetupGroupOrder(Group3, Group1);
            Group3.SetupGroupOrder(Group4, Group2);
            Group4.SetupGroupOrder(null, Group3);
            //Event Handlers
            Group1.ValueChanged += ValidateValue;
            Group2.ValueChanged += ValidateValue;
            Group4.ValueChanged += ValidateValue;
            Group3.ValueChanged += ValidateValue;
        }

        ///<summary>
        ///Routine runs whenever one of the underlying textbox values are updated. <br/>
        ///Stores valid values to the Text property.
        /// </summary>
        private void ValidateValue(object sender, EventArgs e)
        {
            string concatIP = this.Text;
            IsValid = false;
            ErrorProvider_InvalidIP.SetIconAlignment(this.Group4, ErrorIconAlignment.MiddleRight);
            ErrorProvider_InvalidIP.SetIconPadding(this.Group4, 10);
            if (Group1.Text.Length == 0 | Group2.Text.Length == 0 | Group3.Text.Length == 0 | Group4.Text.Length == 0)
                ErrorProvider_InvalidIP.SetError(this.Group4, "Not all textboxes have a value.");
            else if (Convert.ToInt32(Group1.Text) > 255 | Convert.ToInt32(Group2.Text) > 255 | Convert.ToInt32(Group3.Text) > 255 | Convert.ToInt32(Group4.Text) > 255)
                ErrorProvider_InvalidIP.SetError(this.Group4, "Invalid Value - All Values must be between 0-255.");
            else if (System.Net.IPAddress.TryParse(concatIP, out System.Net.IPAddress ip))
            {
                ErrorProvider_InvalidIP.Clear(); //Clear the error
                //TextField = concatIP;
                IsValid = true;
            }
            else
                ErrorProvider_InvalidIP.SetError(this.Group4, "Invalid Data Entry - Must be valid IPV4 format.");
        }

        public bool IsValid { get; private set; }

        /// <summary>
        /// <inheritdoc cref="TextBox.Text"/>
        /// String must be in valid IPV4 format.
        /// </summary>
        /// <returns>The last value that passed validation </returns>
        new public string Text
        {
            get => Group1.Text + '.' + Group2.Text + '.' + Group3.Text + '.' + Group4.Text;
            set
            {
                if (System.Net.IPAddress.TryParse(value, out System.Net.IPAddress iP))
                {
                    string[] split = iP.ToString().Split('.');
                    Group1.Value = Convert.ToInt32(split[0]);
                    Group2.Value = Convert.ToInt32(split[1]);
                    Group3.Value = Convert.ToInt32(split[2]);
                    Group4.Value = Convert.ToInt32(split[3]);
                    //TextField = value;
                }
            }
        }

        /// <inheritdoc cref="Interfaces.IPV4Textbox.Address"/>
        public string Address { get => Text; set => Text=value; }

        /// <summary> Textbox for a single grouping within an IPV4 Address </summary>
        private class IPV4Group : Textbox_NumericOnly
        {

            public IPV4Group() : base() 
            {
                this.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
                base.Minimum = 0;
                base.Maximum = 255;
            }

            public void SetupGroupOrder(IPV4Group nextGroup, IPV4Group previousGroup)
            {
                this.NextGroup = nextGroup;
                this.PreviousGroup = previousGroup;
                base.KeyDown += IPV4Group_KeyDown;
            }

            private IPV4Group NextGroup;
            private IPV4Group PreviousGroup;

            public override int Maximum => 255;
            public override int Minimum => 0;
            public override bool ToolTip_ShowMinMax => false;
            public override bool ErrorProvider_Enabled => false;
            public override int ErrorProvider_IconPadding => 0;
            public override bool ErrorProvider_ShowOnRejectedKeys => false;
            public override int DecimalPlaces => 0;
            public override bool AllowDecimalPoint => false;
            public override bool? DisplayThousandSeperator => false;
            public override bool ToolTip_Enabled => false;
            public override bool AllowThousandSeperator => false;
            public override bool AllowEnteringValuesOutsideMinMax => false;
            
            public int SelectionStart { get => this.InputBox.SelectionStart; set => this.InputBox.SelectionStart = value; }
            public int SelectionLength { get => this.InputBox.SelectionLength; set => this.InputBox.SelectionLength = value; }
            new public string Text { get => this.InputBox.Text; set => this.InputBox.Text = value; }


            private bool SwitchFocusTo(IPV4Group ThisTextBox) { ThisTextBox?.Focus(); return ThisTextBox?.Focused ?? false; }

            private bool SwitchToPrevious(bool HighlightContents)
            {
                if (SwitchFocusTo(PreviousGroup))
                    if (!HighlightContents)
                    {
                        PreviousGroup.SelectionStart = PreviousGroup.Text.Length;
                        PreviousGroup.SelectionLength = 0;
                    } else
                    {
                        PreviousGroup.SelectionStart = 0;
                        PreviousGroup.SelectionLength = PreviousGroup.Text.Length;
                    }
                return PreviousGroup?.Focused ?? false;
            }

            private bool SwitchToNext(bool HighlightContents)
            {
                if (SwitchFocusTo(NextGroup))
                {
                    NextGroup.SelectionStart = 0;
                    if (!HighlightContents)
                        NextGroup.SelectionLength = 0;
                    else
                        NextGroup.SelectionLength = NextGroup.Text.Length;
                }
                return NextGroup?.Focused ?? false;
            }

            // Override the TAB key when transferring between the grouped textboxes.
            protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
            {
                if (this.Focused && keyData == (Keys.Tab | Keys.Shift))
                    return SwitchToPrevious(true);
                else if (this.Focused && keyData == Keys.Tab | keyData == Keys.Space )
                    return SwitchToNext(keyData == Keys.Tab);
                else
                    return base.ProcessCmdKey(ref msg, keyData);
            }

            //Handle special Keys
            private void IPV4Group_KeyDown(object sender, KeyEventArgs e)
            {

                //User backspaces into previous group
                if (e.KeyCode == Keys.Back && this.SelectionStart == 0 && this.SelectionLength == 0) //BackSpace
                {
                    if (PreviousGroup != null) { if (PreviousGroup.Text.Length > 1) PreviousGroup.Text = PreviousGroup.Text.Left(PreviousGroup.Text.Length - 1); else PreviousGroup.Text = ""; }
                    SwitchToPrevious(false);
                }
                
                //User pressed LEFT arrow
                else if ((e.KeyCode == Keys.Left && this.SelectionStart == 0))
                {
                    if (SwitchToPrevious(false))
                        e.Handled = true;
                }
                
                //Period Seperator or user pressed 'enter'
                else if (e.KeyCode == Keys.OemPeriod | e.KeyCode == Keys.Enter)
                    SwitchToNext(e.KeyCode == Keys.Enter);
                
                //User pressed Right arrow
                else if ( (e.KeyCode == Keys.Right && this.SelectionStart == this.Text.Length) ) 
                {
                    if (SwitchToNext(false))
                        e.Handled = true;
                }
            }

            //protected override void OnTextBoxChanged(EventArgs e)
            //{
            //    base.OnTextBoxChanged(e);
            //    if (this.Text.Length >= 3)
            //        SwitchToNext(false);
            //}
        }
    }

    

}
